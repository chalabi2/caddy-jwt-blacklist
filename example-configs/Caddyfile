# Caddy JWT Blacklist Plugin - Configuration Examples
# This demonstrates different usage patterns for the unified JWT authentication and blacklist middleware

{
	admin localhost:2019
	
	log {
		output stdout
		format json
		level INFO
	}
}

# =============================================================================
# Example 1: Basic JWT + Blacklist (Local Redis, no TLS)
# =============================================================================
localhost:8080 {
	stateful_jwt {
		# Redis configuration for blacklist checking
		redis_addr localhost:6379
		redis_password ""
		redis_db 0
		blacklist_prefix "BLACKLIST:key:"
		timeout 50ms
		fail_open true
		log_blocked true
		
		# JWT authentication configuration
		sign_key {env.JWT_SECRET}
		sign_alg HS256
		from_query api_key access_token token
		from_header Authorization X-API-Key
		from_cookies session_token
		user_claims sub jti
		meta_claims "tier" "scope"
	}
	
	respond `{"message":"Hello {http.auth.user.id}!","tier":"{http.auth.user.tier}","api_key_id":"{http.auth.user.jti}","timestamp":"{time.now.unix}"}`
}

# =============================================================================
# Example 2: JWT + Blacklist with Redis TLS
# =============================================================================
api.example.com {
	tls internal
	
	stateful_jwt {
		# Redis with TLS configuration
		redis_addr your-redis-host.com:6379
		redis_password {env.REDIS_PASSWORD}
		redis_db 0
		blacklist_prefix "BLACKLIST:key:"
		timeout 100ms
		fail_open true
		log_blocked true
		
		# TLS configuration for Redis
		tls {
			enabled true
			server_name your-redis-host.com
			min_version "1.2"
		}
		
		# JWT authentication
		sign_key {env.JWT_SECRET}
		sign_alg HS256
		from_query api_key access_token token
		from_header Authorization X-Api-Token X-API-Key
		from_cookies session_token
		user_claims sub jti uid user_id
		meta_claims "tier" "scope" "org_id"
	}
	
	route {
		# Handle CORS preflight
		@options method OPTIONS
		handle @options {
			header {
				Access-Control-Allow-Origin *
				Access-Control-Allow-Methods "GET, POST, OPTIONS"
				Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-API-Key"
				Access-Control-Max-Age 86400
			}
			respond "" 204
		}
		
		# Add user context headers
		header {
			X-User-ID {http.auth.user.id}
			X-User-Tier {http.auth.user.tier}
			X-API-Key-ID {http.auth.user.jti}
		}
		
		handle /status {
			respond `{"status":"ok","user_id":"{http.auth.user.id}","tier":"{http.auth.user.tier}","org_id":"{http.auth.user.org_id}"}` 200
		}
		
		handle /api/* {
			reverse_proxy localhost:8081 {
				header_up X-User-ID {http.auth.user.id}
				header_up X-User-Tier {http.auth.user.tier}
				header_up X-Forwarded-For {remote_ip}
			}
		}
		
		handle {
			respond `{"error":"not_found","message":"Endpoint not found"}` 404
		}
	}
	
	# Error handling with blacklist-specific responses
	handle_errors {
		@blacklist_error expression `{http.error.status_code} == 401 && "blacklisted" in {http.error.message}`
		header @blacklist_error {
			X-Error-Type "api_key_blacklisted"
			WWW-Authenticate "Bearer"
		}
		respond @blacklist_error `{"error":"api_key_blacklisted","message":"API key has been disabled","code":401}` 401
		
		@auth_error expression `{http.error.status_code} == 401`
		header @auth_error {
			X-Error-Type "authentication_failed"
			WWW-Authenticate "Bearer"
		}
		respond @auth_error `{"error":"unauthorized","message":"Invalid or missing API key","code":401}` 401
		
		respond `{"error":"{http.error.status_code}","message":"{http.error.status_text}"}` {http.error.status_code}
	}
}

# =============================================================================
# Example 3: JWT-Only Authentication (No Blacklisting)
# =============================================================================
jwt-only.example.com {
	tls internal
	
	# JWT authentication WITHOUT Redis blacklisting
	stateful_jwt {
		# JWT configuration only
		sign_key {env.JWT_SECRET}
		sign_alg HS256
		from_query api_key access_token token
		from_header Authorization X-Api-Token X-API-Key
		from_cookies session_token
		user_claims sub jti uid user_id
		meta_claims "tier" "scope"
		
		# Disable Redis for JWT-only mode
		redis_addr "disabled"
		fail_open true
		timeout 100ms
	}
	
	route {
		@options method OPTIONS
		handle @options {
			header {
				Access-Control-Allow-Origin *
				Access-Control-Allow-Methods "GET, POST, OPTIONS"
				Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-API-Key"
			}
			respond "" 204
		}
		
		header {
			X-User-ID {http.auth.user.id}
			X-User-Tier {http.auth.user.tier}
		}
		
		handle /status {
			respond `{"status":"ok","auth_mode":"jwt_only","user_id":"{http.auth.user.id}","tier":"{http.auth.user.tier}"}` 200
		}
		
		handle {
			respond `{"error":"not_found","message":"Endpoint not found"}` 404
		}
	}
	
	handle_errors {
		@auth_error expression `{http.error.status_code} == 401`
		respond @auth_error `{"error":"unauthorized","message":"Invalid JWT token","code":401}` 401
		
		respond `{"error":"{http.error.status_code}","message":"{http.error.status_text}"}` {http.error.status_code}
	}
}

