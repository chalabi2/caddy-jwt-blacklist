name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        go-version: [1.22, 1.23]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-test-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Install Redis CLI
        run: sudo apt-get update && sudo apt-get install -y redis-tools

      - name: Verify Redis connectivity
        run: |
          redis-cli -h localhost -p 6379 ping
          redis-cli -h localhost -p 6379 info server | head -5

      - name: Run unit tests (without Redis)
        run: go test -race -coverprofile=coverage-unit.txt -covermode=atomic -run "Test.*" -skip "TestIntegration|TestJWTBlacklistModule|TestMultipleTokenSources|TestWebappBlacklistPatterns|TestRateLimitingIntegration" ./...

      - name: Run integration tests (with Redis)
        run: go test -race -coverprofile=coverage-integration.txt -covermode=atomic -run "TestIntegration|TestJWTBlacklistModule|TestMultipleTokenSources|TestWebappBlacklistPatterns|TestRateLimitingIntegration" ./...
        env:
          REDIS_URL: localhost:6379

      - name: Combine coverage reports
        run: |
          echo "mode: atomic" > coverage.txt
          grep -h -v "mode: atomic" coverage-unit.txt coverage-integration.txt >> coverage.txt || true

      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html

      - name: Test JWT authentication functionality
        run: |
          echo "Running specific JWT authentication tests..."
          go test -v -run "TestAuthenticateJWT|TestValidateJWTConfig|Test_.*Algorithm|TestJWK" ./...

      - name: Test stateful JWT functionality
        run: |
          echo "Running specific stateful JWT functionality tests..."
          go test -v -run "TestJWTBlacklistModule|TestWebappBlacklistPatterns" ./...
        env:
          REDIS_URL: localhost:6379

      - name: Test configuration parsing
        run: |
          echo "Running configuration parsing tests..."
          go test -v -run "TestUnmarshalCaddyfile|TestConfigValidation|TestParseMetaClaim" ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests,integration
          name: codecov-stateful-jwt-auth-go${{ matrix.go-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-stateful-jwt-go${{ matrix.go-version }}
          path: |
            coverage.txt
            coverage.html
            coverage-unit.txt
            coverage-integration.txt
          retention-days: 30

  test-without-redis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22, 1.23]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download dependencies
        run: go mod download

      - name: Test graceful Redis failure handling
        run: |
          echo "Testing behavior when Redis is unavailable..."
          go test -v -run "Test.*" ./... | grep -E "(PASS|FAIL|SKIP)" | sort | uniq -c
          echo "Ensuring integration tests are properly skipped when Redis unavailable..."

  benchmark:
    runs-on: ubuntu-latest
    needs: test

    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Download dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          echo "Running performance benchmarks..."
          go test -bench=. -benchmem -run=^$ ./... > benchmark-results.txt || true
          cat benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.txt
          retention-days: 30
